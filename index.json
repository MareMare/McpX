{
  "api/McpXLib.Abstructs.BasePlc.html": {
    "href": "api/McpXLib.Abstructs.BasePlc.html",
    "title": "Class BasePlc | McpX",
    "summary": "Class BasePlc Namespace McpXLib.Abstructs Assembly McpXLib.dll PLC通信抽象クラス public abstract class BasePlc : IDisposable Inheritance object BasePlc Implements IDisposable Derived Mcp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasePlc(IPlcTransport) インスタンス初期化 protected BasePlc(IPlcTransport transport) Parameters transport IPlcTransport 通信トランスポートを指定します。 Methods Dispose() インスタンス破棄 public virtual void Dispose() Remarks 使用済みのリソースを解放します。 Request(byte[]) リクエスト送信 [Obsolete] public byte[] Request(byte[] packet) Parameters packet byte[] PLCに送信するリクエストパケットを指定します。 Returns byte[] PLCから受信したレスポンスパケットを返します。 Remarks 指定されたパケットをPLCに送信します。 Request(byte[], IReceiveLengthParser) リクエスト送信 public byte[] Request(byte[] packet, IReceiveLengthParser receiveLengthParser) Parameters packet byte[] PLCに送信するリクエストパケットを指定します。 receiveLengthParser IReceiveLengthParser 受信パケット数のパーサークラスを指定します。 Returns byte[] PLCから受信したレスポンスパケットを返します。 Remarks 指定されたパケットをPLCに送信します。 RequestAsync(byte[]) リクエスト送信（非同期） [Obsolete] public Task<byte[]> RequestAsync(byte[] packet) Parameters packet byte[] PLCに送信するリクエストパケットを指定します。 Returns Task<byte[]> PLCから受信したレスポンスパケットを返します。 Remarks 指定されたパケットを非同期でPLCに送信します。 RequestAsync(byte[], IReceiveLengthParser) リクエスト送信（非同期） public Task<byte[]> RequestAsync(byte[] packet, IReceiveLengthParser receiveLengthParser) Parameters packet byte[] PLCに送信するリクエストパケットを指定します。 receiveLengthParser IReceiveLengthParser 受信パケット数のパーサークラスを指定します。 Returns Task<byte[]> PLCから受信したレスポンスパケットを返します。 Remarks 指定されたパケットを非同期でPLCに送信します。"
  },
  "api/McpXLib.Abstructs.html": {
    "href": "api/McpXLib.Abstructs.html",
    "title": "Namespace McpXLib.Abstructs | McpX",
    "summary": "Namespace McpXLib.Abstructs Classes BasePlc PLC通信抽象クラス"
  },
  "api/McpXLib.Enums.Prefix.html": {
    "href": "api/McpXLib.Enums.Prefix.html",
    "title": "Enum Prefix | McpX",
    "summary": "Enum Prefix Namespace McpXLib.Enums Assembly McpXLib.dll デバイスの接頭辞 public enum Prefix : byte Fields B = 160 リンクリレー CC = 195 カウンタコイル CN = 197 カウンタ現在値 CS = 196 カウンタ接点 D = 168 データレジスタ DX = 162 ダイレクトアクセス入力 DY = 163 ダイレクトアクセス出力 F = 147 アナンシェータ L = 146 ラッチリレー M = 144 内部リレー R = 175 ファイルレジスタ（ブロック切換え方式） S = 152 ステップリレー SB = 161 リンク特殊リレー SC = 198 積算タイマコイル SD = 169 特殊レジスタ SM = 145 特殊リレー SN = 200 積算タイマ現在値 SS = 199 積算タイマ接点 SW = 181 リンク特殊レジスタ TC = 192 タイマコイル TN = 194 タイマ現在値 TS = 193 タイマ接点 V = 148 エッジリレー W = 180 リンクレジスタ X = 156 入力 Y = 157 出力 Z = 204 インデックスレジスタ ZR = 176 ファイルレジスタ（連番アクセス方式）"
  },
  "api/McpXLib.Enums.RequestFrame.html": {
    "href": "api/McpXLib.Enums.RequestFrame.html",
    "title": "Enum RequestFrame | McpX",
    "summary": "Enum RequestFrame Namespace McpXLib.Enums Assembly McpXLib.dll リクエストフレーム（データ交信電文） public enum RequestFrame Fields E3 = 0 3Eフレーム E4 = 1 4Eフレーム"
  },
  "api/McpXLib.Enums.html": {
    "href": "api/McpXLib.Enums.html",
    "title": "Namespace McpXLib.Enums | McpX",
    "summary": "Namespace McpXLib.Enums Enums Prefix デバイスの接頭辞 RequestFrame リクエストフレーム（データ交信電文）"
  },
  "api/McpXLib.Exceptions.DeviceAddressException.html": {
    "href": "api/McpXLib.Exceptions.DeviceAddressException.html",
    "title": "Class DeviceAddressException | McpX",
    "summary": "Class DeviceAddressException Namespace McpXLib.Exceptions Assembly McpXLib.dll デバイスアドレスの例外 public class DeviceAddressException : Exception, ISerializable Inheritance object Exception DeviceAddressException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks 下記、場合に例外をスローします。 ・10進のデバイスに対して、アドレスに数字以外の文字列を含んでいる。 ・16進のデバイスに対して、アドレスに16進に変換できない文字列を含んでいる。 Constructors DeviceAddressException(string) デバイスアドレスの例外 public DeviceAddressException(string message) Parameters message string 詳細の内容 Remarks 下記、場合に例外をスローします。 ・10進のデバイスに対して、アドレスに数字以外の文字列を含んでいる。 ・16進のデバイスに対して、アドレスに16進に変換できない文字列を含んでいる。"
  },
  "api/McpXLib.Exceptions.McProtocolException.html": {
    "href": "api/McpXLib.Exceptions.McProtocolException.html",
    "title": "Class McProtocolException | McpX",
    "summary": "Class McProtocolException Namespace McpXLib.Exceptions Assembly McpXLib.dll MCプロトコルの交信例外 public class McProtocolException : Exception, ISerializable Inheritance object Exception McProtocolException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks PLCとの更新時にエラーコードが返ってきた場合に例外をスローします。 Constructors McProtocolException(string) MCプロトコルの交信例外 public McProtocolException(string message) Parameters message string 詳細の内容 Remarks PLCとの更新時にエラーコードが返ってきた場合に例外をスローします。"
  },
  "api/McpXLib.Exceptions.PlcDuplicationException.html": {
    "href": "api/McpXLib.Exceptions.PlcDuplicationException.html",
    "title": "Class PlcDuplicationException | McpX",
    "summary": "Class PlcDuplicationException Namespace McpXLib.Exceptions Assembly McpXLib.dll public class PlcDuplicationException : Exception, ISerializable Inheritance object Exception PlcDuplicationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/McpXLib.Exceptions.RecivePacketException.html": {
    "href": "api/McpXLib.Exceptions.RecivePacketException.html",
    "title": "Class RecivePacketException | McpX",
    "summary": "Class RecivePacketException Namespace McpXLib.Exceptions Assembly McpXLib.dll 受信パケットの例外 public class RecivePacketException : Exception, ISerializable Inheritance object Exception RecivePacketException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks PLCから受け取ったパケットが変換できない場合に例外をスローします。 Constructors RecivePacketException(string) 受信パケットの例外 public RecivePacketException(string message) Parameters message string 詳細の内容 Remarks PLCから受け取ったパケットが変換できない場合に例外をスローします。"
  },
  "api/McpXLib.Exceptions.html": {
    "href": "api/McpXLib.Exceptions.html",
    "title": "Namespace McpXLib.Exceptions | McpX",
    "summary": "Namespace McpXLib.Exceptions Classes DeviceAddressException デバイスアドレスの例外 McProtocolException MCプロトコルの交信例外 PlcDuplicationException RecivePacketException 受信パケットの例外"
  },
  "api/McpXLib.Interfaces.IPacketBuilder.html": {
    "href": "api/McpXLib.Interfaces.IPacketBuilder.html",
    "title": "Interface IPacketBuilder | McpX",
    "summary": "Interface IPacketBuilder Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IPacketBuilder Methods ToAsciiBytes() byte[] ToAsciiBytes() Returns byte[] ToBinaryBytes() byte[] ToBinaryBytes() Returns byte[]"
  },
  "api/McpXLib.Interfaces.IPacketParser.html": {
    "href": "api/McpXLib.Interfaces.IPacketParser.html",
    "title": "Interface IPacketParser | McpX",
    "summary": "Interface IPacketParser Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IPacketParser Methods GetIndex() int GetIndex() Returns int GetLength() int GetLength() Returns int ParsePacket(byte[]) byte[] ParsePacket(byte[] bytes) Parameters bytes byte[] Returns byte[]"
  },
  "api/McpXLib.Interfaces.IPayloadBuilder.html": {
    "href": "api/McpXLib.Interfaces.IPayloadBuilder.html",
    "title": "Interface IPayloadBuilder | McpX",
    "summary": "Interface IPayloadBuilder Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IPayloadBuilder Methods AppendPayload(List<byte>, bool) void AppendPayload(List<byte> packets, bool isAscii) Parameters packets List<byte> isAscii bool"
  },
  "api/McpXLib.Interfaces.IPlc.html": {
    "href": "api/McpXLib.Interfaces.IPlc.html",
    "title": "Interface IPlc | McpX",
    "summary": "Interface IPlc Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IPlc Properties IsAscii bool IsAscii { get; set; } Property Value bool RequestFrame RequestFrame RequestFrame { get; set; } Property Value RequestFrame Route IPacketBuilder Route { get; set; } Property Value IPacketBuilder Methods Request(byte[]) [Obsolete] byte[] Request(byte[] packet) Parameters packet byte[] Returns byte[] Request(byte[], IReceiveLengthParser) byte[] Request(byte[] packet, IReceiveLengthParser receiveLengthParser) Parameters packet byte[] receiveLengthParser IReceiveLengthParser Returns byte[] RequestAsync(byte[]) [Obsolete] Task<byte[]> RequestAsync(byte[] packet) Parameters packet byte[] Returns Task<byte[]> RequestAsync(byte[], IReceiveLengthParser) Task<byte[]> RequestAsync(byte[] packet, IReceiveLengthParser receiveLengthParser) Parameters packet byte[] receiveLengthParser IReceiveLengthParser Returns Task<byte[]>"
  },
  "api/McpXLib.Interfaces.IPlcCommand-1.html": {
    "href": "api/McpXLib.Interfaces.IPlcCommand-1.html",
    "title": "Interface IPlcCommand<T> | McpX",
    "summary": "Interface IPlcCommand<T> Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IPlcCommand<T> : IPacketBuilder Type Parameters T Inherited Members IPacketBuilder.ToBinaryBytes() IPacketBuilder.ToAsciiBytes() Methods Execute(IPlc) T Execute(IPlc plc) Parameters plc IPlc Returns T ExecuteAsync(IPlc) Task<T> ExecuteAsync(IPlc plc) Parameters plc IPlc Returns Task<T>"
  },
  "api/McpXLib.Interfaces.IPlcTransport.html": {
    "href": "api/McpXLib.Interfaces.IPlcTransport.html",
    "title": "Interface IPlcTransport | McpX",
    "summary": "Interface IPlcTransport Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IPlcTransport : IDisposable Inherited Members IDisposable.Dispose() Methods Request(byte[]) [Obsolete] byte[] Request(byte[] packet) Parameters packet byte[] Returns byte[] Request(byte[], IReceiveLengthParser) byte[] Request(byte[] packet, IReceiveLengthParser receiveLengthParser) Parameters packet byte[] receiveLengthParser IReceiveLengthParser Returns byte[] RequestAsync(byte[]) [Obsolete] Task<byte[]> RequestAsync(byte[] packet) Parameters packet byte[] Returns Task<byte[]> RequestAsync(byte[], IReceiveLengthParser) Task<byte[]> RequestAsync(byte[] packet, IReceiveLengthParser receiveLengthParser) Parameters packet byte[] receiveLengthParser IReceiveLengthParser Returns Task<byte[]>"
  },
  "api/McpXLib.Interfaces.IReceiveLengthParser.html": {
    "href": "api/McpXLib.Interfaces.IReceiveLengthParser.html",
    "title": "Interface IReceiveLengthParser | McpX",
    "summary": "Interface IReceiveLengthParser Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IReceiveLengthParser Methods GetHeaderLength() ushort GetHeaderLength() Returns ushort ParseContentLength(byte[]) ushort ParseContentLength(byte[] bytes) Parameters bytes byte[] Returns ushort"
  },
  "api/McpXLib.Interfaces.IRequestPacketBuilder.html": {
    "href": "api/McpXLib.Interfaces.IRequestPacketBuilder.html",
    "title": "Interface IRequestPacketBuilder | McpX",
    "summary": "Interface IRequestPacketBuilder Namespace McpXLib.Interfaces Assembly McpXLib.dll public interface IRequestPacketBuilder : IPacketBuilder Inherited Members IPacketBuilder.ToBinaryBytes() IPacketBuilder.ToAsciiBytes() Properties CommandPacketBuilder IPacketBuilder CommandPacketBuilder { get; } Property Value IPacketBuilder RoutePacketBuilder IPacketBuilder RoutePacketBuilder { get; } Property Value IPacketBuilder SubHeaderPacketBuilder IPacketBuilder SubHeaderPacketBuilder { get; } Property Value IPacketBuilder"
  },
  "api/McpXLib.Interfaces.html": {
    "href": "api/McpXLib.Interfaces.html",
    "title": "Namespace McpXLib.Interfaces | McpX",
    "summary": "Namespace McpXLib.Interfaces Interfaces IPacketBuilder IPacketParser IPayloadBuilder IPlc IPlcCommand<T> IPlcTransport IReceiveLengthParser IRequestPacketBuilder"
  },
  "api/McpXLib.Mcp.html": {
    "href": "api/McpXLib.Mcp.html",
    "title": "Class Mcp | McpX",
    "summary": "Class Mcp Namespace McpXLib Assembly McpXLib.dll MCプロトコル実装クラス（コマンド追加以外は、McpXクラスを使用してください。） public class Mcp : BasePlc, IDisposable, IPlc Inheritance object BasePlc Mcp Implements IDisposable IPlc Derived McpX Inherited Members BasePlc.RequestAsync(byte[]) BasePlc.Request(byte[]) BasePlc.Request(byte[], IReceiveLengthParser) BasePlc.RequestAsync(byte[], IReceiveLengthParser) BasePlc.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsAscii ASCIIコードによる交信を行う場合にtrueを指定します。 public bool IsAscii { get; set; } Property Value bool RequestFrame フレーム（データ交信電文）の種類を指定します。 public RequestFrame RequestFrame { get; set; } Property Value RequestFrame Route アクセス経路を指定します。 public IPacketBuilder Route { get; set; } Property Value IPacketBuilder Methods MonitorAsync<T1, T2>((Prefix, string)[], (Prefix, string)[]) デバイスモニター（非同期） public Task<(T1[] wordValues, T2[] doubleValues)> MonitorAsync<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) where T1 : unmanaged where T2 : unmanaged Parameters wordAddresses (Prefix, string)[] 16ビット単位でモニターするデバイスアドレスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 doubleWordAddresses (Prefix, string)[] 32ビット単位でモニターするデバイスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 Returns Task<(T1[] wordValues, T2[] doubleValues)> PLCから読み込んだ値を指定した型T1、T2に変換して返します。 ・wordValues: 16ビット単位で読み込まれた T1型の値の配列 ・doubleValues: 32ビット単位で読み込まれた T2型の値の配列 Type Parameters T1 16ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 T2 32ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks モニター登録したデバイスの値を非同期でPLCから読み込みます。 指定された型T1、T2に応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions ArgumentException モニター登録のデバイス範囲を超過した場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 MonitorRegist((Prefix, string)[], (Prefix, string)[]) デバイスモニター登録 public void MonitorRegist((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] 16ビット単位でモニターするデバイスアドレスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 doubleWordAddresses (Prefix, string)[] 32ビット単位でモニターするデバイスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 Remarks モニターするデバイスをPLCに登録します。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 ArgumentException モニター登録のデバイス範囲を超過した場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 MonitorRegistAsync((Prefix, string)[], (Prefix, string)[]) デバイスモニター登録（非同期） public Task MonitorRegistAsync((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] 16ビット単位でモニターするデバイスアドレスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 doubleWordAddresses (Prefix, string)[] 32ビット単位でモニターするデバイスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 Returns Task Remarks モニターするデバイスを非同期でPLCに登録します。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 ArgumentException モニター登録のデバイス範囲を超過した場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 Monitor<T1, T2>((Prefix, string)[], (Prefix, string)[]) デバイスモニター public (T1[] wordValues, T2[] doubleValues) Monitor<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) where T1 : unmanaged where T2 : unmanaged Parameters wordAddresses (Prefix, string)[] 16ビット単位でモニターするデバイスアドレスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 doubleWordAddresses (Prefix, string)[] 32ビット単位でモニターするデバイスの配列を指定します。 ・prefix:モニター対象のデバイスコードを指定します。 ・address:モニター対象のアドレスを指定します。 Returns (T1[] wordValues, T2[] doubleValues) PLCから読み込んだ値を指定した型T1、T2に変換して返します。 ・wordValues: 16ビット単位で読み込まれた T1型の値の配列 ・doubleValues: 32ビット単位で読み込まれた T2型の値の配列 Type Parameters T1 16ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 T2 32ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks モニター登録したデバイスの値をPLCから読み込みます。 指定された型T1、T2に応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions ArgumentException モニター登録のデバイス範囲を超過した場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。"
  },
  "api/McpXLib.McpX.html": {
    "href": "api/McpXLib.McpX.html",
    "title": "Class McpX | McpX",
    "summary": "Class McpX Namespace McpXLib Assembly McpXLib.dll MCプロトコル拡張クラス public class McpX : Mcp, IDisposable, IPlc Inheritance object BasePlc Mcp McpX Implements IDisposable IPlc Inherited Members Mcp.IsAscii Mcp.Route Mcp.RequestFrame Mcp.MonitorRegistAsync((Prefix, string)[], (Prefix, string)[]) Mcp.MonitorRegist((Prefix, string)[], (Prefix, string)[]) Mcp.MonitorAsync<T1, T2>((Prefix, string)[], (Prefix, string)[]) Mcp.Monitor<T1, T2>((Prefix, string)[], (Prefix, string)[]) BasePlc.RequestAsync(byte[]) BasePlc.Request(byte[]) BasePlc.Request(byte[], IReceiveLengthParser) BasePlc.RequestAsync(byte[], IReceiveLengthParser) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Mcpクラス（MCプロトコル）を拡張して、デバイスアクセス点数などの機能制限を補うクラスです。 Constructors McpX(string, int, string?, bool, bool, RequestFrame) インスタンス初期化 public McpX(string ip, int port, string? password = null, bool isAscii = false, bool isUdp = false, RequestFrame requestFrame = RequestFrame.E3) Parameters ip string PLCのIPアドレスを指定します。 port int PLCのポートを指定します。 password string PLCのリモートパスワードを指定します。（リモートパスワードを設定している場合に指定してください。） isAscii bool ASCIIコードによる交信を行う場合にtrueを指定します。（デフォルトは、バイナリ交信:falseです。） isUdp bool UDPによる交信を行う場合にtrueを指定します。（デフォルトは、TCP交信:falseです。） requestFrame RequestFrame フレーム（データ交信電文）の種類を指定します。（デフォルトは、3Eフレーム:RequestFrame.E3です。） Remarks PLCのパラメータ設定に合わせたPLCの接続情報を指定します。 必要に応じて、リモートロックの解除を行います。 Exceptions RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 Methods BatchReadAsync<T>(Prefix, string, ushort) 連続デバイス読み込み（非同期） public Task<T[]> BatchReadAsync<T>(Prefix prefix, string address, ushort length) where T : unmanaged Parameters prefix Prefix 読み込み対象の先頭デバイスコードを指定します。 address string 読み込み対象の先頭アドレスを指定します。 length ushort 読み込み対象の要素数を指定します。 指定された型Tに応じて、内部的に読み込むデバイス点数は自動的に調整されます。 そのため、この引数には「最終的に取得する配列の要素数（T型の要素数）」を指定してください。 Returns Task<T[]> PLCから読み込んだ値を指定された型Tに変換して返します。 Type Parameters T 読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイス範囲の値を非同期でPLCから読み込みます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 BatchReadBool(Prefix, string, ushort) public bool[] BatchReadBool(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns bool[] BatchReadBoolAsync(Prefix, string, ushort) public Task<bool[]> BatchReadBoolAsync(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<bool[]> BatchReadByte(Prefix, string, ushort) public byte[] BatchReadByte(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns byte[] BatchReadByteAsync(Prefix, string, ushort) public Task<byte[]> BatchReadByteAsync(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<byte[]> BatchReadDouble(Prefix, string, ushort) public double[] BatchReadDouble(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns double[] BatchReadDoubleAsync(Prefix, string, ushort) public Task<double[]> BatchReadDoubleAsync(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<double[]> BatchReadInt16(Prefix, string, ushort) public short[] BatchReadInt16(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns short[] BatchReadInt16Async(Prefix, string, ushort) public Task<short[]> BatchReadInt16Async(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<short[]> BatchReadInt32(Prefix, string, ushort) public int[] BatchReadInt32(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns int[] BatchReadInt32Async(Prefix, string, ushort) public Task<int[]> BatchReadInt32Async(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<int[]> BatchReadInt64(Prefix, string, ushort) public long[] BatchReadInt64(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns long[] BatchReadInt64Async(Prefix, string, ushort) public Task<long[]> BatchReadInt64Async(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<long[]> BatchReadSByte(Prefix, string, ushort) public sbyte[] BatchReadSByte(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns sbyte[] BatchReadSByteAsync(Prefix, string, ushort) public Task<sbyte[]> BatchReadSByteAsync(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<sbyte[]> BatchReadSingle(Prefix, string, ushort) public float[] BatchReadSingle(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns float[] BatchReadSingleAsync(Prefix, string, ushort) public Task<float[]> BatchReadSingleAsync(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<float[]> BatchReadUInt16(Prefix, string, ushort) public ushort[] BatchReadUInt16(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns ushort[] BatchReadUInt16Async(Prefix, string, ushort) public Task<ushort[]> BatchReadUInt16Async(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<ushort[]> BatchReadUInt32(Prefix, string, ushort) public uint[] BatchReadUInt32(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns uint[] BatchReadUInt32Async(Prefix, string, ushort) public Task<uint[]> BatchReadUInt32Async(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<uint[]> BatchReadUInt64(Prefix, string, ushort) public ulong[] BatchReadUInt64(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns ulong[] BatchReadUInt64Async(Prefix, string, ushort) public Task<ulong[]> BatchReadUInt64Async(Prefix prefix, string address, ushort length) Parameters prefix Prefix address string length ushort Returns Task<ulong[]> BatchRead<T>(Prefix, string, ushort) 連続デバイス読み込み public T[] BatchRead<T>(Prefix prefix, string address, ushort length) where T : unmanaged Parameters prefix Prefix 読み込み対象の先頭デバイスコードを指定します。 address string 読み込み対象の先頭アドレスを指定します。 length ushort 読み込み対象の要素数を指定します。 指定された型Tに応じて、内部的に読み込むデバイス点数は自動的に調整されます。 そのため、この引数には「最終的に取得する配列の要素数（T型の要素数）」を指定してください。 Returns T[] PLCから読み込んだ値を指定された型Tに変換して返します。 Type Parameters T 読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイス範囲の値をPLCから読み込みます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 BatchWriteAsync<T>(Prefix, string, T[]) 連続デバイス書き込み（非同期） public Task<T[]> BatchWriteAsync<T>(Prefix prefix, string address, T[] values) where T : unmanaged Parameters prefix Prefix 書き込み対象の先頭デバイスコードを指定します。 address string 書き込み対象の先頭アドレスを指定します。 values T[] 書き込みする値を配列で指定します。 Returns Task<T[]> valuesの値をそのまま返します。 Type Parameters T 書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイス範囲に値を非同期でPLCへ書き込みます。 指定された型Tに応じて、内部的に書き込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 BatchWriteBool(Prefix, string, bool[]) public bool[] BatchWriteBool(Prefix prefix, string address, bool[] values) Parameters prefix Prefix address string values bool[] Returns bool[] BatchWriteBoolAsync(Prefix, string, bool[]) public Task<bool[]> BatchWriteBoolAsync(Prefix prefix, string address, bool[] values) Parameters prefix Prefix address string values bool[] Returns Task<bool[]> BatchWriteByte(Prefix, string, byte[]) public byte[] BatchWriteByte(Prefix prefix, string address, byte[] values) Parameters prefix Prefix address string values byte[] Returns byte[] BatchWriteByteAsync(Prefix, string, byte[]) public Task<byte[]> BatchWriteByteAsync(Prefix prefix, string address, byte[] values) Parameters prefix Prefix address string values byte[] Returns Task<byte[]> BatchWriteDouble(Prefix, string, double[]) public double[] BatchWriteDouble(Prefix prefix, string address, double[] values) Parameters prefix Prefix address string values double[] Returns double[] BatchWriteDoubleAsync(Prefix, string, double[]) public Task<double[]> BatchWriteDoubleAsync(Prefix prefix, string address, double[] values) Parameters prefix Prefix address string values double[] Returns Task<double[]> BatchWriteInt16(Prefix, string, short[]) public short[] BatchWriteInt16(Prefix prefix, string address, short[] values) Parameters prefix Prefix address string values short[] Returns short[] BatchWriteInt16Async(Prefix, string, short[]) public Task<short[]> BatchWriteInt16Async(Prefix prefix, string address, short[] values) Parameters prefix Prefix address string values short[] Returns Task<short[]> BatchWriteInt32(Prefix, string, int[]) public int[] BatchWriteInt32(Prefix prefix, string address, int[] values) Parameters prefix Prefix address string values int[] Returns int[] BatchWriteInt32Async(Prefix, string, int[]) public Task<int[]> BatchWriteInt32Async(Prefix prefix, string address, int[] values) Parameters prefix Prefix address string values int[] Returns Task<int[]> BatchWriteInt64(Prefix, string, long[]) public long[] BatchWriteInt64(Prefix prefix, string address, long[] values) Parameters prefix Prefix address string values long[] Returns long[] BatchWriteInt64Async(Prefix, string, long[]) public Task<long[]> BatchWriteInt64Async(Prefix prefix, string address, long[] values) Parameters prefix Prefix address string values long[] Returns Task<long[]> BatchWriteSByte(Prefix, string, sbyte[]) public sbyte[] BatchWriteSByte(Prefix prefix, string address, sbyte[] values) Parameters prefix Prefix address string values sbyte[] Returns sbyte[] BatchWriteSByteAsync(Prefix, string, sbyte[]) public Task<sbyte[]> BatchWriteSByteAsync(Prefix prefix, string address, sbyte[] values) Parameters prefix Prefix address string values sbyte[] Returns Task<sbyte[]> BatchWriteSingle(Prefix, string, float[]) public float[] BatchWriteSingle(Prefix prefix, string address, float[] values) Parameters prefix Prefix address string values float[] Returns float[] BatchWriteSingleAsync(Prefix, string, float[]) public Task<float[]> BatchWriteSingleAsync(Prefix prefix, string address, float[] values) Parameters prefix Prefix address string values float[] Returns Task<float[]> BatchWriteUInt16(Prefix, string, ushort[]) public ushort[] BatchWriteUInt16(Prefix prefix, string address, ushort[] values) Parameters prefix Prefix address string values ushort[] Returns ushort[] BatchWriteUInt16Async(Prefix, string, ushort[]) public Task<ushort[]> BatchWriteUInt16Async(Prefix prefix, string address, ushort[] values) Parameters prefix Prefix address string values ushort[] Returns Task<ushort[]> BatchWriteUInt32(Prefix, string, uint[]) public uint[] BatchWriteUInt32(Prefix prefix, string address, uint[] values) Parameters prefix Prefix address string values uint[] Returns uint[] BatchWriteUInt32Async(Prefix, string, uint[]) public Task<uint[]> BatchWriteUInt32Async(Prefix prefix, string address, uint[] values) Parameters prefix Prefix address string values uint[] Returns Task<uint[]> BatchWriteUInt64(Prefix, string, ulong[]) public ulong[] BatchWriteUInt64(Prefix prefix, string address, ulong[] values) Parameters prefix Prefix address string values ulong[] Returns ulong[] BatchWriteUInt64Async(Prefix, string, ulong[]) public Task<ulong[]> BatchWriteUInt64Async(Prefix prefix, string address, ulong[] values) Parameters prefix Prefix address string values ulong[] Returns Task<ulong[]> BatchWrite<T>(Prefix, string, T[]) 連続デバイス書き込み public T[] BatchWrite<T>(Prefix prefix, string address, T[] values) where T : unmanaged Parameters prefix Prefix 書き込み対象の先頭デバイスコードを指定します。 address string 書き込み対象の先頭アドレスを指定します。 values T[] 書き込みする値を配列で指定します。 Returns T[] valuesの値をそのまま返します。 Type Parameters T 書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイス範囲に値をPLCへ書き込みます。 指定された型Tに応じて、内部的に書き込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 Dispose() インスタンス破棄 public override void Dispose() Remarks 使用済みのリソースを解放し、必要に応じてPLCのリモートロックを実行します。 RandomReadAsync<T1, T2>((Prefix prefix, string address)[], (Prefix prefix, string address)[]) ランダムデバイス読み込み（非同期） public Task<(T1[] wordValues, T2[] doubleValues)> RandomReadAsync<T1, T2>((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) where T1 : unmanaged where T2 : unmanaged Parameters wordAddresses (Prefix, string)[] 16ビット単位で読み込むデバイスアドレスの配列を指定します。 ・prefix:読み込み対象のデバイスコードを指定します。 ・address:読み込み対象のアドレスを指定します。 doubleWordAddresses (Prefix, string)[] 32ビット単位で読み込むデバイスの配列を指定します。 ・prefix:読み込み対象のデバイスコードを指定します。 ・address:読み込み対象のアドレスを指定します。 Returns Task<(T1[] wordValues, T2[] doubleValues)> PLCから読み込んだ値を指定した型T1、T2に変換して返します。 ・wordValues: 16ビット単位で読み込まれた T1型の値の配列 ・doubleValues: 32ビット単位で読み込まれた T2型の値の配列 Type Parameters T1 16ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 T2 32ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイスの値を非同期でPLCから読み込みます。 指定された型T1、T2に応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 RandomReadInt16Int32((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public (short[] wordValues, int[] doubleValues) RandomReadInt16Int32((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns (short[] wordValues, int[] doubleValues) RandomReadInt16Int32Async((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public Task<(short[] wordValues, int[] doubleValues)> RandomReadInt16Int32Async((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns Task<(short[] wordValues, int[] doubleValues)> RandomReadInt16Single((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public (short[] wordValues, float[] doubleValues) RandomReadInt16Single((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns (short[] wordValues, float[] doubleValues) RandomReadInt16SingleAsync((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public Task<(short[] wordValues, float[] doubleValues)> RandomReadInt16SingleAsync((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns Task<(short[] wordValues, float[] doubleValues)> RandomReadInt16UInt32((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public (short[] wordValues, uint[] doubleValues) RandomReadInt16UInt32((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns (short[] wordValues, uint[] doubleValues) RandomReadInt16UInt32Async((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public Task<(short[] wordValues, uint[] doubleValues)> RandomReadInt16UInt32Async((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns Task<(short[] wordValues, uint[] doubleValues)> RandomReadUInt16Int32((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public (ushort[] wordValues, int[] doubleValues) RandomReadUInt16Int32((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns (ushort[] wordValues, int[] doubleValues) RandomReadUInt16Int32Async((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public Task<(ushort[] wordValues, int[] doubleValues)> RandomReadUInt16Int32Async((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns Task<(ushort[] wordValues, int[] doubleValues)> RandomReadUInt16Single((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public (ushort[] wordValues, float[] doubleValues) RandomReadUInt16Single((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns (ushort[] wordValues, float[] doubleValues) RandomReadUInt16SingleAsync((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public Task<(ushort[] wordValues, float[] doubleValues)> RandomReadUInt16SingleAsync((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns Task<(ushort[] wordValues, float[] doubleValues)> RandomReadUInt16UInt32((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public (ushort[] wordValues, uint[] doubleValues) RandomReadUInt16UInt32((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns (ushort[] wordValues, uint[] doubleValues) RandomReadUInt16UInt32Async((Prefix prefix, string address)[], (Prefix prefix, string address)[]) public Task<(ushort[] wordValues, uint[] doubleValues)> RandomReadUInt16UInt32Async((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) Parameters wordAddresses (Prefix, string)[] doubleWordAddresses (Prefix, string)[] Returns Task<(ushort[] wordValues, uint[] doubleValues)> RandomRead<T1, T2>((Prefix prefix, string address)[], (Prefix prefix, string address)[]) ランダムデバイス読み込み public (T1[] wordValues, T2[] doubleValues) RandomRead<T1, T2>((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) where T1 : unmanaged where T2 : unmanaged Parameters wordAddresses (Prefix, string)[] 16ビット単位で読み込むデバイスアドレスの配列を指定します。 ・prefix:読み込み対象のデバイスコードを指定します。 ・address:読み込み対象のアドレスを指定します。 doubleWordAddresses (Prefix, string)[] 32ビット単位で読み込むデバイスの配列を指定します。 ・prefix:読み込み対象のデバイスコードを指定します。 ・address:読み込み対象のアドレスを指定します。 Returns (T1[] wordValues, T2[] doubleValues) PLCから読み込んだ値を指定した型T1、T2に変換して返します。 ・wordValues: 16ビット単位で読み込まれた T1型の値の配列 ・doubleValues: 32ビット単位で読み込まれた T2型の値の配列 Type Parameters T1 16ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 T2 32ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイスの値をPLCから読み込みます。 指定された型T1、T2に応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 RandomWriteAsync<T1, T2>((Prefix prefix, string address, T1 value)[], (Prefix prefix, string address, T2 value)[]) ランダムデバイス書き込み（非同期） public Task RandomWriteAsync<T1, T2>((Prefix prefix, string address, T1 value)[] wordDevices, (Prefix prefix, string address, T2 value)[] doubleWordDevices) where T1 : unmanaged where T2 : unmanaged Parameters wordDevices (Prefix prefix, string address, T1 value)[] 16ビット単位で書き込むデバイスの配列を指定します。 ・prefix:書き込み対象のデバイスコードを指定します。 ・address:書き込み対象のアドレスを指定します。 ・value:書き込みする値を指定します。 doubleWordDevices (Prefix prefix, string address, T2 value)[] 32ビット単位で書き込むデバイスの配列を指定します。 ・prefix:書き込み対象のデバイスコードを指定します。 ・address:書き込み対象のアドレスを指定します。 ・value:書き込みする値を指定します。 Returns Task Type Parameters T1 16ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 T2 32ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイスに対し、値を非同期でPLCへ書き込みます。 指定された型T1、T2に応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 RandomWriteInt16Int32((Prefix prefix, string address, short value)[], (Prefix prefix, string address, int value)[]) public void RandomWriteInt16Int32((Prefix prefix, string address, short value)[] wordDevices, (Prefix prefix, string address, int value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, short value)[] doubleWordDevices (Prefix prefix, string address, int value)[] RandomWriteInt16Int32Async((Prefix prefix, string address, short value)[], (Prefix prefix, string address, int value)[]) public Task RandomWriteInt16Int32Async((Prefix prefix, string address, short value)[] wordDevices, (Prefix prefix, string address, int value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, short value)[] doubleWordDevices (Prefix prefix, string address, int value)[] Returns Task RandomWriteInt16Single((Prefix prefix, string address, short value)[], (Prefix prefix, string address, float value)[]) public void RandomWriteInt16Single((Prefix prefix, string address, short value)[] wordDevices, (Prefix prefix, string address, float value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, short value)[] doubleWordDevices (Prefix prefix, string address, float value)[] RandomWriteInt16SingleAsync((Prefix prefix, string address, short value)[], (Prefix prefix, string address, float value)[]) public Task RandomWriteInt16SingleAsync((Prefix prefix, string address, short value)[] wordDevices, (Prefix prefix, string address, float value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, short value)[] doubleWordDevices (Prefix prefix, string address, float value)[] Returns Task RandomWriteInt16UInt32((Prefix prefix, string address, short value)[], (Prefix prefix, string address, uint value)[]) public void RandomWriteInt16UInt32((Prefix prefix, string address, short value)[] wordDevices, (Prefix prefix, string address, uint value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, short value)[] doubleWordDevices (Prefix prefix, string address, uint value)[] RandomWriteInt16UInt32Async((Prefix prefix, string address, short value)[], (Prefix prefix, string address, uint value)[]) public Task RandomWriteInt16UInt32Async((Prefix prefix, string address, short value)[] wordDevices, (Prefix prefix, string address, uint value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, short value)[] doubleWordDevices (Prefix prefix, string address, uint value)[] Returns Task RandomWriteUInt16Int32((Prefix prefix, string address, ushort value)[], (Prefix prefix, string address, int value)[]) public void RandomWriteUInt16Int32((Prefix prefix, string address, ushort value)[] wordDevices, (Prefix prefix, string address, int value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, ushort value)[] doubleWordDevices (Prefix prefix, string address, int value)[] RandomWriteUInt16Int32Async((Prefix prefix, string address, ushort value)[], (Prefix prefix, string address, int value)[]) public Task RandomWriteUInt16Int32Async((Prefix prefix, string address, ushort value)[] wordDevices, (Prefix prefix, string address, int value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, ushort value)[] doubleWordDevices (Prefix prefix, string address, int value)[] Returns Task RandomWriteUInt16Single((Prefix prefix, string address, ushort value)[], (Prefix prefix, string address, float value)[]) public void RandomWriteUInt16Single((Prefix prefix, string address, ushort value)[] wordDevices, (Prefix prefix, string address, float value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, ushort value)[] doubleWordDevices (Prefix prefix, string address, float value)[] RandomWriteUInt16SingleAsync((Prefix prefix, string address, ushort value)[], (Prefix prefix, string address, float value)[]) public Task RandomWriteUInt16SingleAsync((Prefix prefix, string address, ushort value)[] wordDevices, (Prefix prefix, string address, float value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, ushort value)[] doubleWordDevices (Prefix prefix, string address, float value)[] Returns Task RandomWriteUInt16UInt32((Prefix prefix, string address, ushort value)[], (Prefix prefix, string address, uint value)[]) public void RandomWriteUInt16UInt32((Prefix prefix, string address, ushort value)[] wordDevices, (Prefix prefix, string address, uint value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, ushort value)[] doubleWordDevices (Prefix prefix, string address, uint value)[] RandomWriteUInt16UInt32Async((Prefix prefix, string address, ushort value)[], (Prefix prefix, string address, uint value)[]) public Task RandomWriteUInt16UInt32Async((Prefix prefix, string address, ushort value)[] wordDevices, (Prefix prefix, string address, uint value)[] doubleWordDevices) Parameters wordDevices (Prefix prefix, string address, ushort value)[] doubleWordDevices (Prefix prefix, string address, uint value)[] Returns Task RandomWrite<T1, T2>((Prefix prefix, string address, T1 value)[], (Prefix prefix, string address, T2 value)[]) ランダムデバイス書き込み public void RandomWrite<T1, T2>((Prefix prefix, string address, T1 value)[] wordDevices, (Prefix prefix, string address, T2 value)[] doubleWordDevices) where T1 : unmanaged where T2 : unmanaged Parameters wordDevices (Prefix prefix, string address, T1 value)[] 16ビット単位で書き込むデバイスの配列を指定します。 ・prefix:書き込み対象のデバイスコードを指定します。 ・address:書き込み対象のアドレスを指定します。 ・value:書き込みする値を指定します。 doubleWordDevices (Prefix prefix, string address, T2 value)[] 32ビット単位で書き込むデバイスの配列を指定します。 ・prefix:書き込み対象のデバイスコードを指定します。 ・address:書き込み対象のアドレスを指定します。 ・value:書き込みする値を指定します。 Type Parameters T1 16ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 T2 32ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイスに対し、値をPLCへ書き込みます。 指定された型T1、T2に応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 ReadAsync<T>(Prefix, string) 単一デバイス読み込み（非同期） public Task<T> ReadAsync<T>(Prefix prefix, string address) where T : unmanaged Parameters prefix Prefix 読み込み対象の先頭デバイスコードを指定します。 address string 読み込み対象の先頭アドレス Returns Task<T> PLCから読み込んだ値を指定された型Tに変換して返します。 Type Parameters T 読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイスの値を非同期でPLCから読み込みます。 指定された型Tに応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 ReadBool(Prefix, string) public bool ReadBool(Prefix prefix, string address) Parameters prefix Prefix address string Returns bool ReadBoolAsync(Prefix, string) public Task<bool> ReadBoolAsync(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<bool> ReadByte(Prefix, string) public byte ReadByte(Prefix prefix, string address) Parameters prefix Prefix address string Returns byte ReadByteAsync(Prefix, string) public Task<byte> ReadByteAsync(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<byte> ReadDouble(Prefix, string) public double ReadDouble(Prefix prefix, string address) Parameters prefix Prefix address string Returns double ReadDoubleAsync(Prefix, string) public Task<double> ReadDoubleAsync(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<double> ReadInt16(Prefix, string) public short ReadInt16(Prefix prefix, string address) Parameters prefix Prefix address string Returns short ReadInt16Async(Prefix, string) public Task<short> ReadInt16Async(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<short> ReadInt32(Prefix, string) public int ReadInt32(Prefix prefix, string address) Parameters prefix Prefix address string Returns int ReadInt32Async(Prefix, string) public Task<int> ReadInt32Async(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<int> ReadInt64(Prefix, string) public long ReadInt64(Prefix prefix, string address) Parameters prefix Prefix address string Returns long ReadInt64Async(Prefix, string) public Task<long> ReadInt64Async(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<long> ReadSByte(Prefix, string) public sbyte ReadSByte(Prefix prefix, string address) Parameters prefix Prefix address string Returns sbyte ReadSByteAsync(Prefix, string) public Task<sbyte> ReadSByteAsync(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<sbyte> ReadSingle(Prefix, string) public float ReadSingle(Prefix prefix, string address) Parameters prefix Prefix address string Returns float ReadSingleAsync(Prefix, string) public Task<float> ReadSingleAsync(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<float> ReadString(Prefix, string, ushort) 文字列読み込み public string ReadString(Prefix prefix, string address, ushort length) Parameters prefix Prefix 読み込み対象の先頭デバイスコードを指定します。 address string 読み込み対象の先頭アドレスを指定します。 length ushort 読み込みデバイス点数を指定します。 Returns string PLCから読み込んだ値（Shift_JIS）を文字列に変換して返します。 Remarks 指定したデバイス範囲の値を文字列として、PLCから読み込みます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 ReadStringAsync(Prefix, string, ushort) 文字列読み込み（非同期） public Task<string> ReadStringAsync(Prefix prefix, string address, ushort length) Parameters prefix Prefix 読み込み対象の先頭デバイスコードを指定します。 address string 読み込み対象の先頭アドレスを指定します。 length ushort 読み込みデバイス点数を指定します。 Returns Task<string> PLCから読み込んだ値（Shift_JIS）を文字列に変換して返します。 Remarks 指定したデバイス範囲の値を文字列として、非同期でPLCから読み込みます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 ReadUInt16(Prefix, string) public ushort ReadUInt16(Prefix prefix, string address) Parameters prefix Prefix address string Returns ushort ReadUInt16Async(Prefix, string) public Task<ushort> ReadUInt16Async(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<ushort> ReadUInt32(Prefix, string) public uint ReadUInt32(Prefix prefix, string address) Parameters prefix Prefix address string Returns uint ReadUInt32Async(Prefix, string) public Task<uint> ReadUInt32Async(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<uint> ReadUInt64(Prefix, string) public ulong ReadUInt64(Prefix prefix, string address) Parameters prefix Prefix address string Returns ulong ReadUInt64Async(Prefix, string) public Task<ulong> ReadUInt64Async(Prefix prefix, string address) Parameters prefix Prefix address string Returns Task<ulong> Read<T>(Prefix, string) 単一デバイス読み込み public T Read<T>(Prefix prefix, string address) where T : unmanaged Parameters prefix Prefix 読み込み対象の先頭デバイスコードを指定します。 address string 読み込み対象の先頭アドレスを指定します。 Returns T PLCから読み込んだ値を指定された型Tに変換して返します。 Type Parameters T 読み込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 単一デバイスの値をPLCから読み込みます。 指定された型Tに応じて、内部的に読み込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 WriteAsync<T>(Prefix, string, T) 単一デバイス書き込み（非同期） public Task WriteAsync<T>(Prefix prefix, string address, T value) where T : unmanaged Parameters prefix Prefix 書き込み対象の先頭デバイスコードを指定します。 address string 書き込み対象の先頭アドレスを指定します。 value T 書き込みする値を指定します。 Returns Task Type Parameters T 書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 指定したデバイスに値を非同期でPLCへ書き込みます。 指定された型Tに応じて、内部的に書き込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 WriteBool(Prefix, string, bool) public void WriteBool(Prefix prefix, string address, bool value) Parameters prefix Prefix address string value bool WriteBoolAsync(Prefix, string, bool) public Task WriteBoolAsync(Prefix prefix, string address, bool value) Parameters prefix Prefix address string value bool Returns Task WriteByte(Prefix, string, byte) public void WriteByte(Prefix prefix, string address, byte value) Parameters prefix Prefix address string value byte WriteByteAsync(Prefix, string, byte) public Task WriteByteAsync(Prefix prefix, string address, byte value) Parameters prefix Prefix address string value byte Returns Task WriteDouble(Prefix, string, double) public void WriteDouble(Prefix prefix, string address, double value) Parameters prefix Prefix address string value double WriteDoubleAsync(Prefix, string, double) public Task WriteDoubleAsync(Prefix prefix, string address, double value) Parameters prefix Prefix address string value double Returns Task WriteInt16(Prefix, string, short) public void WriteInt16(Prefix prefix, string address, short value) Parameters prefix Prefix address string value short WriteInt16Async(Prefix, string, short) public Task WriteInt16Async(Prefix prefix, string address, short value) Parameters prefix Prefix address string value short Returns Task WriteInt32(Prefix, string, int) public void WriteInt32(Prefix prefix, string address, int value) Parameters prefix Prefix address string value int WriteInt32Async(Prefix, string, int) public Task WriteInt32Async(Prefix prefix, string address, int value) Parameters prefix Prefix address string value int Returns Task WriteInt64(Prefix, string, long) public void WriteInt64(Prefix prefix, string address, long value) Parameters prefix Prefix address string value long WriteInt64Async(Prefix, string, long) public Task WriteInt64Async(Prefix prefix, string address, long value) Parameters prefix Prefix address string value long Returns Task WriteSByte(Prefix, string, sbyte) public void WriteSByte(Prefix prefix, string address, sbyte value) Parameters prefix Prefix address string value sbyte WriteSByteAsync(Prefix, string, sbyte) public Task WriteSByteAsync(Prefix prefix, string address, sbyte value) Parameters prefix Prefix address string value sbyte Returns Task WriteSingle(Prefix, string, float) public void WriteSingle(Prefix prefix, string address, float value) Parameters prefix Prefix address string value float WriteSingleAsync(Prefix, string, float) public Task WriteSingleAsync(Prefix prefix, string address, float value) Parameters prefix Prefix address string value float Returns Task WriteString(Prefix, string, string) 文字列書き込み public void WriteString(Prefix prefix, string address, string value) Parameters prefix Prefix 書き込み対象の先頭デバイスコードを指定します。 address string 書き込み対象の先頭アドレスを指定します。 value string 書き込みする文字列を指定します。 Remarks 指定したデバイスに対して、Shift_JISに変換した文字列データをPLCへ書き込みます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 WriteStringAsync(Prefix, string, string) 文字列書き込み（非同期） public Task WriteStringAsync(Prefix prefix, string address, string value) Parameters prefix Prefix 書き込み対象の先頭デバイスコードを指定します。 address string 書き込み対象の先頭アドレスを指定します。 value string 書き込みする文字列を指定します。 Returns Task Remarks 指定したデバイスに対して、Shift_JISに変換した文字列データを非同期でPLCへ書き込みます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。 WriteUInt16(Prefix, string, ushort) public void WriteUInt16(Prefix prefix, string address, ushort value) Parameters prefix Prefix address string value ushort WriteUInt16Async(Prefix, string, ushort) public Task WriteUInt16Async(Prefix prefix, string address, ushort value) Parameters prefix Prefix address string value ushort Returns Task WriteUInt32(Prefix, string, uint) public void WriteUInt32(Prefix prefix, string address, uint value) Parameters prefix Prefix address string value uint WriteUInt32Async(Prefix, string, uint) public Task WriteUInt32Async(Prefix prefix, string address, uint value) Parameters prefix Prefix address string value uint Returns Task WriteUInt64(Prefix, string, ulong) public void WriteUInt64(Prefix prefix, string address, ulong value) Parameters prefix Prefix address string value ulong WriteUInt64Async(Prefix, string, ulong) public Task WriteUInt64Async(Prefix prefix, string address, ulong value) Parameters prefix Prefix address string value ulong Returns Task Write<T>(Prefix, string, T) 単一デバイス書き込み public void Write<T>(Prefix prefix, string address, T value) where T : unmanaged Parameters prefix Prefix 書き込み対象の先頭デバイスコードを指定します。 address string 書き込み対象の先頭アドレスを指定します。 value T 書き込みする値を指定します。 Type Parameters T 書き込むデータの型。bool, short, int などの値型を指定します。 unmanaged 制約があるため、参照型は使用できません。 Remarks 単一デバイスの値をPLCに書き込みます。 指定された型Tに応じて、内部的に書き込むデバイス点数は自動的に調整されます。 Exceptions DeviceAddressException 指定したアドレスが不正の場合に例外をスローします。 RecivePacketException 受信したパケットの内容が不正な値の場合に例外をスローします。 McProtocolException PLCからエラーコードを受信した場合に例外をスローします。"
  },
  "api/McpXLib.html": {
    "href": "api/McpXLib.html",
    "title": "Namespace McpXLib | McpX",
    "summary": "Namespace McpXLib Classes Mcp MCプロトコル実装クラス（コマンド追加以外は、McpXクラスを使用してください。） McpX MCプロトコル拡張クラス"
  },
  "docs/CHANGELOG.html": {
    "href": "docs/CHANGELOG.html",
    "title": "| McpX",
    "summary": "[0.5.4] - 2025-09-03 Fixed Fixed an issue in the BatchRead method where specifying types larger than 32 bits resulted in an incorrect read count. [0.5.3] - 2025-08-14 Added Added VB-compatible, type-specific overloads [0.5.2] - 2025-07-16 Fixed Fix bug in hex address conversion. [0.5.1] - 2024-04-17 Changed Optimized TCP transport performance. [0.5.0] - 2024-04-14 Added Added documentation comments [0.4.2] - 2024-04-13 Changed Changed unnecessary public modifiers to internal [0.4.1] - 2024-04-12 Fixed Fixed a bug where an error would occur in the random read or monitor command if the number of specified word devices was not exactly two. [0.4.0] - 2024-04-12 Added Support for 4E frames (binary and ASCII) Changed Improved packet generation process Improved packet parsing process [0.3.0] - 2024-04-07 Added Added string read functionality Added string write functionality [0.2.0] - 2024-04-03 Added Support for UDP [0.1.0] - 2024-03-29 Added Support for 3E frames (ASCII)"
  },
  "docs/CHANGELOG_JA.html": {
    "href": "docs/CHANGELOG_JA.html",
    "title": "| McpX",
    "summary": "[0.5.4] - 2025-09-03 Fixed BatchReadメソッドで32ビット以上の型を指定した場合、読み出し点数が正しく計算されない不具合を修正 [0.5.3] - 2025-08-14 Added VB互換の型固有のオーバーロードを追加 [0.5.2] - 2025-07-16 Fixed 16進アドレス変換の不具合を修正 [0.5.1] - 2024-04-17 Changed TCP通信処理のパフォーマンスを最適化 [0.5.0] - 2024-04-14 Added ドキュメントコメントを追加 [0.4.2] - 2024-04-13 Changed 不要なpublic修飾子をinternalに変更 [0.4.1] - 2024-04-12 Fixed ランダムリード／モニターコマンドにおいて、ワードデバイスの指定数が2点以外の場合にエラーが発生する不具合を修正 [0.4.0] - 2024-04-12 Added 4Eフレーム（バイナリ、ASCII）に対応 Changed パケット生成処理を改善 パケット解析処理を改善 [0.3.0] - 2024-04-07 Added 文字列読み込み機能を追加 文字列書き込み機能を追加 [0.2.0] - 2024-04-03 Added UDPに対応 [0.1.0] - 2024-03-29 Added 3Eフレーム（ASCII）に対応"
  },
  "docs/README.html": {
    "href": "docs/README.html",
    "title": "| McpX",
    "summary": "日本語 | English McpX is a library for communicating with Mitsubishi Electric PLCs using the MC protocol. It features a simple and easy-to-use API, allowing you to communicate without worrying about MC protocol details. It runs on various platforms, including Linux, Windows, and macOS. Installation .NET CLI dotnet add package McpX Package Manager(Visual Studio) PM> NuGet\\Install-Package McpX Example Usage using McpXLib; using McpXLib.Enums; // Connect to PLC by specifying IP and port using (var mcpx = new McpX(\"192.168.12.88\", 10000)) { // Read 7000 points starting from M0 bool[] mArr = mcpx.BatchRead<bool>(Prefix.M, \"0\", 7000); // Read 7000 words starting from D1000 short[] dArr = mcpx.BatchRead<short>(Prefix.D, \"1000\", 7000); // Write 1234 to D0 and 5678 to D1 as signed 32-bit integers mcpx.BatchWrite<int>(Prefix.D, \"0\", [1234, 5678]); } C# and Visual Basic samples are available here. Supported Commands Name Description Synchronous Method Asynchronous Method Single Read Reads a single value from the specified device. Read<T>(Prefix prefix, string address) ReadAsync<T>(Prefix prefix, string address) Single Write Writes a single value to the specified device. Write<T>(Prefix prefix, string address, T value) WriteAsync<T>(Prefix prefix, string address, T value) Batch Read Reads multiple consecutive values starting from the specified address. BatchRead<T>(Prefix prefix, string address, ushort length) BatchReadAsync<T>(Prefix prefix, string address, ushort length) Batch Write Writes an array of values to consecutive device addresses. BatchWrite<T>(Prefix prefix, string address, T[] values) BatchWriteAsync<T>(Prefix prefix, string address, T[] values) Random Read Reads values from non-consecutive word and double-word addresses. RandomRead<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) RandomReadAsync<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) Random Write Writes values to non-consecutive word and double-word addresses. RandomWrite<T1, T2>(...) RandomWriteAsync<T1, T2>(...) Monitor Registration Registers devices to monitor. MonitorRegist((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) MonitorRegistAsync((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) Monitor Read Reads the latest values from registered monitoring devices. Monitor<T1, T2>(...) MonitorAsync<T1, T2>(...) Remote Password Lock/Unlock Automatically locks the PLC with the specified remote password when the instance is created and unlocks it when disposed. McpX(string ip, int port, string? password = null) – Supported Protocols TCP UDP 3E frame (binary code) 3E frame (ASCII code) 4E frame (binary code) 4E frame (ASCII code) Roadmap [x] 3E frame (ASCII code) support [x] 4E frame (binary code) support [x] 4E frame (ASCII code) support [x] UDP support Changelog CHANGELOG.md"
  },
  "docs/README_JA.html": {
    "href": "docs/README_JA.html",
    "title": "| McpX",
    "summary": "日本語 | English McpXは、三菱電機製PLCと通信するためのMCプロトコル対応ライブラリです。 シンプルなAPIで扱いやすく、MCプロトコルを意識することなく利用でき、Linux、Windows、macOS など、さまざまなプラットフォームで動作します。 インストール方法 .NET CLI dotnet add package McpX Package Manager(Visual Studio) PM> NuGet\\Install-Package McpX 使用例 using McpXLib; using McpXLib.Enums; // IP、Portを指定してPLCに接続 using (var mcpx = new McpX(\"192.168.12.88\", 10000)) { // M0から7000点取得 bool[] mArr = mcpx.BatchRead<bool>(Prefix.M, \"0\", 7000); // D1000から7000ワード取得 short[] dArr = mcpx.BatchRead<short>(Prefix.D, \"1000\", 7000); // D0に1234、D1に5678を符号あり32ビットで書込み mcpx.BatchWrite<int>(Prefix.D, \"0\", [1234, 5678]); } C#、Visual Basicのサンプルはこちら 対応コマンド 名称 説明 同期メソッド 非同期メソッド 単一読出し デバイスの単一値を取得します。 Read<T>(Prefix prefix, string address) ReadAsync<T>(Prefix prefix, string address) 単一書込み デバイスに単一値を書き込みます。 Write<T>(Prefix prefix, string address, T value) WriteAsync<T>(Prefix prefix, string address, T value) 一括読出し 連続したデバイスから、指定数のデータを一括で読み出します。 BatchRead<T>(Prefix prefix, string address, ushort length) BatchReadAsync<T>(Prefix prefix, string address, ushort length) 一括書込み 複数のデバイスに配列で指定した値を一括書き込みします。 BatchWrite<T>(Prefix prefix, string address, T[] values) BatchWriteAsync<T>(Prefix prefix, string address, T[] values) ランダム読出し 非連続アドレスからワード・ダブルワード単位で読み出します。 RandomRead<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) RandomReadAsync<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) ランダム書込み 非連続アドレスにワード・ダブルワード単位で書き込みます。 RandomWrite<T1, T2>(...) RandomWriteAsync<T1, T2>(...) モニタ登録 モニタ対象デバイスを登録します。 MonitorRegist((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) MonitorRegistAsync((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) モニタ読み取り 登録済みモニタデバイスの最新値を読み出します。 Monitor<T1, T2>(...) MonitorAsync<T1, T2>(...) リモートパスワード ロック/アンロック リモートパスワード指定時、インスタンス生成時にロック、破棄時に自動アンロックします。 McpX(string ip, int port, string? password = null) － 対応プロトコル TCP UDP 3Eフレーム（バイナリコード） 3Eフレーム（ASCIIコード） 4Eフレーム（バイナリコード） 4Eフレーム（ASCIIコード） 今後の予定 [x] 3Eフレーム（ASCIIコード）対応 [x] 4Eフレーム（バイナリコード）対応 [x] 4Eフレーム（ASCIIコード）対応 [x] UDP対応 変更履歴 CHANGELOG_JA.md"
  },
  "docs/example.html": {
    "href": "docs/example.html",
    "title": "使用例 | McpX",
    "summary": "使用例 C# 非同期処理の例 using McpXLib; using McpXLib.Enums; class Program { static async Task Main(string[] args) { // McpX 通信インスタンスを生成 // - IPアドレス: 192.168.12.88 // - ポート番号: 10000 // - ASCII形式通信: true // - UDP使用: false（TCP通信） using (var mcpx = new McpX(\"192.168.12.88\", 10000, isAscii: true, isUdp: false)) { // ビットデバイス M0 に bool 型で true を書き込む await mcpx.WriteAsync<bool>(Prefix.M, \"0\", true); // ビットデバイス M0 の値を bool 型で読み取る bool m0 = await mcpx.ReadAsync<bool>(Prefix.M, \"0\"); Console.WriteLine($\"M0: {m0}\"); // ワードデバイス D0 に short 型で 32767 を書き込む await mcpx.WriteAsync<short>(Prefix.D, \"0\", 32767); // ワードデバイス D0 の値を short 型で読み取る short d0 = await mcpx.ReadAsync<short>(Prefix.D, \"0\"); Console.WriteLine($\"D0: {d0}\"); // ダブルワードデバイス D2 に int 型で 2147483647 を書き込む await mcpx.WriteAsync<int>(Prefix.D, \"2\", 2147483647); // ダブルワードデバイス D2 の値を int 型で読み取る int d2 = await mcpx.ReadAsync<int>(Prefix.D, \"2\"); Console.WriteLine($\"D2: {d2}\"); // ダブルワードデバイス D4 に float 型で最大値を設定して書き込む await mcpx.WriteAsync<float>(Prefix.D, \"4\", (float)3.4028235E+38); // D4 の値を float 型で読み取る float d4 = await mcpx.ReadAsync<float>(Prefix.D, \"4\"); Console.WriteLine($\"D4: {d4}\"); // ダブルワードデバイス D6 に double 型で最大値を設定して書き込む await mcpx.WriteAsync<double>(Prefix.D, \"6\", (double)1.7976931348623157E+308); // D6 の値を double 型で読み取る double d6 = await mcpx.ReadAsync<double>(Prefix.D, \"6\"); Console.WriteLine($\"D6: {d6}\"); // 7000 ワード分の short 配列を D10 から一括書き込み short[] dbwArr = new short[7000]; for (int i = 0; i < dbwArr.Length; i++) { dbwArr[i] = (short)i; } await mcpx.BatchWriteAsync<short>(Prefix.D, \"10\", dbwArr); // D10 から 7000 ワード分を一括で short 型として読み取る short[] dbrArr = await mcpx.BatchReadAsync<short>(Prefix.D, \"10\", 7000); int l = 0; foreach (var dr in dbrArr) { Console.WriteLine($\"D{ 10 + l }: { dr }\"); l++; } // ランダムなワード/ダブルワードDeviceに short/int 型で書き込み await mcpx.RandomWriteAsync<short, int>( wordDevices: [ (Prefix.D, \"8000\", 32766), (Prefix.D, \"8010\", 32767) ], doubleWordDevices: [ (Prefix.D, \"8020\", 2147483646), (Prefix.D, \"8030\", 2147483647) ] ); // ランダムなワード/ダブルワードアドレスから short/int 型で読み取り var drrArr = await mcpx.RandomReadAsync<short, int>( wordAddresses: [ (Prefix.D, \"8000\"), (Prefix.D, \"8010\") ], doubleWordAddresses: [ (Prefix.D, \"8020\"), (Prefix.D, \"8030\") ] ); Console.WriteLine($\"D8000: { drrArr.wordValues[0] }\"); Console.WriteLine($\"D8010: { drrArr.wordValues[1] }\"); Console.WriteLine($\"D8020: { drrArr.doubleValues[0] }\"); Console.WriteLine($\"D8030: { drrArr.doubleValues[1] }\"); // ワード・ダブルワードデバイスをモニタ登録する（初回のみ必要） await mcpx.MonitorRegistAsync( wordAddresses: [ (Prefix.D, \"8000\"), (Prefix.D, \"8010\") ], doubleWordAddresses: [ (Prefix.D, \"8020\"), (Prefix.D, \"8030\") ] ); // モニタ登録したデバイスの値を取得する（ワード: short 型、ダブルワード: int 型） var dmArr = await mcpx.MonitorAsync<short, int>( wordAddresses: [ (Prefix.D, \"8000\"), (Prefix.D, \"8010\") ], doubleWordAddresses: [ (Prefix.D, \"8020\"), (Prefix.D, \"8030\") ] ); Console.WriteLine($\"D8000: { dmArr.wordValues[0] }\"); Console.WriteLine($\"D8010: { dmArr.wordValues[1] }\"); Console.WriteLine($\"D8020: { dmArr.doubleValues[0] }\"); Console.WriteLine($\"D8030: { dmArr.doubleValues[1] }\"); } } } C# 同期処理の例 using McpXLib; using McpXLib.Enums; class Program { static void Main(string[] args) { // McpX 通信インスタンスを生成 // - IPアドレス: 192.168.12.88 // - ポート番号: 10000 // - ASCII形式通信: true // - UDP使用: false（TCP通信） using (var mcpx = new McpX(\"192.168.12.88\", 10000, isAscii: true, isUdp: false)) { // ビットデバイス M0 に bool 型で true を書き込む mcpx.Write<bool>(Prefix.M, \"0\", true); // ビットデバイス M0 の値を bool 型で読み取る bool m0 = mcpx.Read<bool>(Prefix.M, \"0\"); Console.WriteLine($\"M0: {m0}\"); // ワードデバイス D0 に short 型で 32767 を書き込む mcpx.Write<short>(Prefix.D, \"0\", 32767); // ワードデバイス D0 の値を short 型で読み取る short d0 = mcpx.Read<short>(Prefix.D, \"0\"); Console.WriteLine($\"D0: {d0}\"); // ダブルワードデバイス D2 に int 型で 2147483647 を書き込む mcpx.Write<int>(Prefix.D, \"2\", 2147483647); // ダブルワードデバイス D2 の値を int 型で読み取る int d2 = mcpx.Read<int>(Prefix.D, \"2\"); Console.WriteLine($\"D2: {d2}\"); // ダブルワードデバイス D4 に float 型で最大値を設定して書き込む mcpx.Write<float>(Prefix.D, \"4\", (float)3.4028235E+38); // D4 の値を float 型で読み取る float d4 = mcpx.Read<float>(Prefix.D, \"4\"); Console.WriteLine($\"D4: {d4}\"); // ダブルワードデバイス D6 に double 型で最大値を設定して書き込む mcpx.Write<double>(Prefix.D, \"6\", (double)1.7976931348623157E+308); // D6 の値を double 型で読み取る double d6 = mcpx.Read<double>(Prefix.D, \"6\"); Console.WriteLine($\"D6: {d6}\"); // 7000 ワード分の short 配列を D10 から一括書き込み short[] dbwArr = new short[7000]; for (int i = 0; i < dbwArr.Length; i++) { dbwArr[i] = (short)i; } mcpx.BatchWrite<short>(Prefix.D, \"10\", dbwArr); // D10 から 7000 ワード分を一括で short 型として読み取る short[] dbrArr = mcpx.BatchRead<short>(Prefix.D, \"10\", 7000); int l = 0; foreach (var dr in dbrArr) { Console.WriteLine($\"D{ 10 + l }: { dr }\"); l++; } // ランダムなワード/ダブルワードDeviceに short/int 型で書き込み mcpx.RandomWrite<short, int>( wordDevices: [ (Prefix.D, \"8000\", 32766), (Prefix.D, \"8010\", 32767) ], doubleWordDevices: [ (Prefix.D, \"8020\", 2147483646), (Prefix.D, \"8030\", 2147483647) ] ); // ランダムなワード/ダブルワードアドレスから short/int 型で読み取り var drrArr = mcpx.RandomRead<short, int>( wordAddresses: [ (Prefix.D, \"8000\"), (Prefix.D, \"8010\") ], doubleWordAddresses: [ (Prefix.D, \"8020\"), (Prefix.D, \"8030\") ] ); Console.WriteLine($\"D8000: { drrArr.wordValues[0] }\"); Console.WriteLine($\"D8010: { drrArr.wordValues[1] }\"); Console.WriteLine($\"D8020: { drrArr.doubleValues[0] }\"); Console.WriteLine($\"D8030: { drrArr.doubleValues[1] }\"); // ワード・ダブルワードデバイスをモニタ登録する（初回のみ必要） mcpx.MonitorRegist( wordAddresses: [ (Prefix.D, \"8000\"), (Prefix.D, \"8010\") ], doubleWordAddresses: [ (Prefix.D, \"8020\"), (Prefix.D, \"8030\") ] ); // モニタ登録したデバイスの値を取得する（ワード: short 型、ダブルワード: int 型） var dmArr = mcpx.Monitor<short, int>( wordAddresses: [ (Prefix.D, \"8000\"), (Prefix.D, \"8010\") ], doubleWordAddresses: [ (Prefix.D, \"8020\"), (Prefix.D, \"8030\") ] ); Console.WriteLine($\"D8000: { dmArr.wordValues[0] }\"); Console.WriteLine($\"D8010: { dmArr.wordValues[1] }\"); Console.WriteLine($\"D8020: { dmArr.doubleValues[0] }\"); Console.WriteLine($\"D8030: { dmArr.doubleValues[1] }\"); } } } VisualBasic 非同期処理の例 Imports System Imports System.Threading.Tasks Imports McpXLib Imports McpXLib.Enums Module Program Sub Main() RunAsync().Wait() End Sub Async Function RunAsync() As Task ' McpX 通信インスタンスを生成 ' - IPアドレス: 192.168.12.88 ' - ポート番号: 10000 ' - ASCII形式通信: true ' - UDP使用: false（TCP通信） Using mcpx As New McpX(\"192.168.12.88\", 10000, isAscii:=True, isUdp:=False) ' ビットデバイス M0 に bool 型で true を書き込む Await mcpx.WriteAsync(Of Boolean)(Prefix.M, \"0\", True) ' ビットデバイス M0 の値を bool 型で読み取る Dim m0 As Boolean = Await mcpx.ReadAsync(Of Boolean)(Prefix.M, \"0\") Console.WriteLine($\"M0: {m0}\") ' ワードデバイス D0 に short 型で 32767 を書き込む Await mcpx.WriteAsync(Of Short)(Prefix.D, \"0\", CShort(32767)) ' ワードデバイス D0 の値を short 型で読み取る Dim d0 As Short = Await mcpx.ReadAsync(Of Short)(Prefix.D, \"0\") Console.WriteLine($\"D0: {d0}\") ' ダブルワードデバイス D2 に int 型で 2147483647 を書き込む Await mcpx.WriteAsync(Of Integer)(Prefix.D, \"2\", 2147483647) ' ダブルワードデバイス D2 の値を int 型で読み取る Dim d2 As Integer = Await mcpx.ReadAsync(Of Integer)(Prefix.D, \"2\") Console.WriteLine($\"D2: {d2}\") ' ダブルワードデバイス D4 に float 型で最大値を設定して書き込む Await mcpx.WriteAsync(Of Single)(Prefix.D, \"4\", CSng(3.4028235E+38)) ' D4 の値を float 型で読み取る Dim d4 As Single = Await mcpx.ReadAsync(Of Single)(Prefix.D, \"4\") Console.WriteLine($\"D4: {d4}\") ' ダブルワードデバイス D6 に double 型で最大値を設定して書き込む Await mcpx.WriteAsync(Of Double)(Prefix.D, \"6\", 1.7976931348623157E+308) ' D6 の値を double 型で読み取る Dim d6 As Double = Await mcpx.ReadAsync(Of Double)(Prefix.D, \"6\") Console.WriteLine($\"D6: {d6}\") ' 7000 ワード分の short 配列を D10 から一括書き込み Dim dbwArr(6999) As Short For i As Integer = 0 To dbwArr.Length - 1 dbwArr(i) = CShort(i) Next Await mcpx.BatchWriteAsync(Of Short)(Prefix.D, \"10\", dbwArr) ' D10 から 7000 ワード分を一括で short 型として読み取る Dim dbrArr As Short() = Await mcpx.BatchReadAsync(Of Short)(Prefix.D, \"10\", 7000) Dim l As Integer = 0 For Each dr In dbrArr Console.WriteLine($\"D{10 + l}: {dr}\") l += 1 Next ' ランダムなワード/ダブルワードDeviceに short/int 型で書き込み Await mcpx.RandomWriteAsync(Of Short, Integer)( wordDevices:={ New ValueTuple(Of Prefix, String, Short)(Prefix.D, \"8000\", 32766), New ValueTuple(Of Prefix, String, Short)(Prefix.D, \"8010\", 32767) }, doubleWordDevices:={ New ValueTuple(Of Prefix, String, Integer)(Prefix.D, \"8020\", 2147483646), New ValueTuple(Of Prefix, String, Integer)(Prefix.D, \"8030\", 2147483647) } ) ' ランダムなワード/ダブルワードアドレスから short/int 型で読み取り Dim drrArr = Await mcpx.RandomReadAsync(Of Short, Integer)( wordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8000\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8010\") }, doubleWordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8020\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8030\") } ) Console.WriteLine($\"D8000: {drrArr.wordValues(0)}\") Console.WriteLine($\"D8010: {drrArr.wordValues(1)}\") Console.WriteLine($\"D8020: {drrArr.doubleValues(0)}\") Console.WriteLine($\"D8030: {drrArr.doubleValues(1)}\") ' ワード・ダブルワードデバイスをモニタ登録する（初回のみ必要） Await mcpx.MonitorRegistAsync( wordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8000\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8010\") }, doubleWordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8020\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8030\") } ) ' モニタ登録したデバイスの値を取得する（ワード: short 型、ダブルワード: int 型） Dim dmArr = Await mcpx.MonitorAsync(Of Short, Integer)( wordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8000\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8010\") }, doubleWordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8020\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8030\") } ) Console.WriteLine($\"D8000: {dmArr.wordValues(0)}\") Console.WriteLine($\"D8010: {dmArr.wordValues(1)}\") Console.WriteLine($\"D8020: {dmArr.doubleValues(0)}\") Console.WriteLine($\"D8030: {dmArr.doubleValues(1)}\") End Using End Function End Module VisualBasic 同期処理の例 Imports McpXLib Imports McpXLib.Enums Module Program Sub Main() ' McpX 通信インスタンスを生成 ' - IPアドレス: 192.168.12.88 ' - ポート番号: 10000 ' - ASCII形式通信: true ' - UDP使用: false（TCP通信） Using mcpx As New McpX(\"192.168.12.88\", 10000, isAscii:=True, isUdp:=False) ' ビットデバイス M0 に bool 型で true を書き込む mcpx.Write(Of Boolean)(Prefix.M, \"0\", True) ' ビットデバイス M0 の値を bool 型で読み取る Dim m0 As Boolean = mcpx.Read(Of Boolean)(Prefix.M, \"0\") Console.WriteLine($\"M0: {m0}\") ' ワードデバイス D0 に short 型で 32767 を書き込む mcpx.Write(Of Short)(Prefix.D, \"0\", 32767) ' ワードデバイス D0 の値を short 型で読み取る Dim d0 As Short = mcpx.Read(Of Short)(Prefix.D, \"0\") Console.WriteLine($\"D0: {d0}\") ' ダブルワードデバイス D2 に int 型で 2147483647 を書き込む mcpx.Write(Of Integer)(Prefix.D, \"2\", 2147483647) ' ダブルワードデバイス D2 の値を int 型で読み取る Dim d2 As Integer = mcpx.Read(Of Integer)(Prefix.D, \"2\") Console.WriteLine($\"D2: {d2}\") ' ダブルワードデバイス D4 に float 型で最大値を設定して書き込む mcpx.Write(Of Single)(Prefix.D, \"4\", CSng(3.4028235E+38)) ' D4 の値を float 型で読み取る Dim d4 As Single = mcpx.Read(Of Single)(Prefix.D, \"4\") Console.WriteLine($\"D4: {d4}\") ' ダブルワードデバイス D6 に double 型で最大値を設定して書き込む mcpx.Write(Of Double)(Prefix.D, \"6\", 1.7976931348623157E+308) ' D6 の値を double 型で読み取る Dim d6 As Double = mcpx.Read(Of Double)(Prefix.D, \"6\") Console.WriteLine($\"D6: {d6}\") ' 7000 ワード分の short 配列を D10 から一括書き込み Dim dbwArr(6999) As Short For i As Integer = 0 To dbwArr.Length - 1 dbwArr(i) = CShort(i) Next mcpx.BatchWrite(Of Short)(Prefix.D, \"10\", dbwArr) ' D10 から 7000 ワード分を一括で short 型として読み取る Dim dbrArr As Short() = mcpx.BatchRead(Of Short)(Prefix.D, \"10\", 7000) Dim l As Integer = 0 For Each dr In dbrArr Console.WriteLine($\"D{10 + l}: {dr}\") l += 1 Next ' ランダムなワード/ダブルワードDeviceに short/int 型で書き込み mcpx.RandomWrite(Of Short, Integer)( wordDevices:={ New ValueTuple(Of Prefix, String, Short)(Prefix.D, \"8000\", 32766), New ValueTuple(Of Prefix, String, Short)(Prefix.D, \"8010\", 32767) }, doubleWordDevices:={ New ValueTuple(Of Prefix, String, Integer)(Prefix.D, \"8020\", 2147483646), New ValueTuple(Of Prefix, String, Integer)(Prefix.D, \"8030\", 2147483647) } ) ' ランダムなワード/ダブルワードアドレスから short/int 型で読み取り Dim drrArr = mcpx.RandomRead(Of Short, Integer)( wordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8000\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8010\") }, doubleWordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8020\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8030\") } ) Console.WriteLine($\"D8000: {drrArr.wordValues(0)}\") Console.WriteLine($\"D8010: {drrArr.wordValues(1)}\") Console.WriteLine($\"D8020: {drrArr.doubleValues(0)}\") Console.WriteLine($\"D8030: {drrArr.doubleValues(1)}\") ' ワード・ダブルワードデバイスをモニタ登録する（初回のみ必要） mcpx.MonitorRegist( wordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8000\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8010\") }, doubleWordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8020\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8030\") } ) ' モニタ登録したデバイスの値を取得する（ワード: short 型、ダブルワード: int 型） Dim dmArr = mcpx.Monitor(Of Short, Integer)( wordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8000\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8010\") }, doubleWordAddresses:={ New ValueTuple(Of Prefix, String)(Prefix.D, \"8020\"), New ValueTuple(Of Prefix, String)(Prefix.D, \"8030\") } ) Console.WriteLine($\"D8000: {dmArr.wordValues(0)}\") Console.WriteLine($\"D8010: {dmArr.wordValues(1)}\") Console.WriteLine($\"D8020: {dmArr.doubleValues(0)}\") Console.WriteLine($\"D8030: {dmArr.doubleValues(1)}\") End Using End Sub End Module"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | McpX",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "インストール方法 | McpX",
    "summary": "インストール方法 .NET CLI dotnet add package McpX Package Manager(Visual Studio) PM> NuGet\\Install-Package McpX"
  },
  "docs/license.html": {
    "href": "docs/license.html",
    "title": "ライセンス | McpX",
    "summary": "ライセンス MIT License Copyright (c) 2025 YudaiKitamura Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "docs/plc_parameter_setting.html": {
    "href": "docs/plc_parameter_setting.html",
    "title": "PLCパラメータ設定 | McpX",
    "summary": "PLCパラメータ設定 内蔵Ethernet使用時 設定項目 説明 Mcpxのパラメータ IPアドレス PLCのIPアドレスを指定します。 コンストラクタのipにPLCのIPを指定します。 交信データコード バイナリコード交信、ASCIIコード交信を指定します。 ASCIIコード交信の場合にコンストラクタのisAsciiにtrueを指定します。 RUN中書込を許可する デバイスに書込みを行う場合に有効にします。 - プロトコル TCP、UDPを指定します。 UDPの場合にコンストラクタのisUdpにtrueを指定します。 オープン方式 MCプロトコルを指定します。 - 自局ポート番号 通信を行うポート番号（1025～4999, 5010～65534の範囲）を指定します。 コンストラクタのportにPLCのポート番号を指定します。"
  },
  "docs/supported_protocols_and_commands.html": {
    "href": "docs/supported_protocols_and_commands.html",
    "title": "対応プロトコル・コマンド | McpX",
    "summary": "対応プロトコル・コマンド プロトコル TCP UDP 3Eフレーム (バイナリコード交信) 3Eフレーム (ASCIIコード交信) 4Eフレーム (バイナリコード交信) 4Eフレーム (ASCIIコード交信) コマンド 名称 説明 同期メソッド 非同期メソッド 単一読出し デバイスの単一値を取得します。 Read (Prefix prefix, string address) ReadAsync (Prefix prefix, string address) 単一書込み デバイスに単一値を書き込みます。 Write (Prefix prefix, string address, T value) WriteAsync (Prefix prefix, string address, T value) 一括読出し 連続したデバイスから、指定数のデータを一括で読み出します。 BatchRead (Prefix prefix, string address, ushort length) BatchReadAsync (Prefix prefix, string address, ushort length) 一括書込み 複数のデバイスに配列で指定した値を一括書き込みします。 BatchWrite (Prefix prefix, string address, T[] values) BatchWriteAsync (Prefix prefix, string address, T[] values) ランダム読出し 非連続アドレスからワード・ダブルワード単位で読み出します。 RandomRead<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) RandomReadAsync<T1, T2>((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) ランダム書込み 非連続アドレスにワード・ダブルワード単位で書き込みます。 RandomWrite<T1, T2>(...) RandomWriteAsync<T1, T2>(...) モニタ登録 モニタ対象デバイスを登録します。 MonitorRegist((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) MonitorRegistAsync((Prefix, string)[] wordAddresses, (Prefix, string)[] doubleWordAddresses) モニタ読み取り 登録済みモニタデバイスの最新値を読み出します。 Monitor<T1, T2>(...) MonitorAsync<T1, T2>(...) リモートパスワード ロック/アンロック リモートパスワード指定時、インスタンス生成時にロック、破棄時に自動アンロックします。 McpX(string ip, int port, string? password = null) －"
  },
  "index.html": {
    "href": "index.html",
    "title": "ようこそ | McpX",
    "summary": ".half-width { width: 50%; background: #1e1e1e; color: #dcdcdc; padding: 1em; border-radius: 6px; overflow-x: auto; } .affix { display: none !important; } window.addEventListener('DOMContentLoaded', () => { new TypeIt(\"#typing-box1\", { speed: 15, waitUntilVisible: true, lifeLike: true, cursor: false, afterComplete: () => { Prism.highlightElement(document.getElementById(\"typing-box1\")); } }) .type(\"dotnet add package McpX\") .go(); }); window.addEventListener('DOMContentLoaded', () => { new TypeIt(\"#typing-box2\", { speed: 15, waitUntilVisible: true, lifeLike: true, cursor: false, afterComplete: () => { Prism.highlightElement(document.getElementById(\"typing-box2\")); } }) .type(\"using McpXLib;\\n\") .type(\"using McpXLib.Enums;\\n\\n\") .type('using (var mcpx = new McpX(\"192.168.12.88\", 10000)){\\n') .type(' mcpx.Write<short>(Prefix.D, \"0\", 1234);\\n') .type(' var value = mcpx.Read<short>(Prefix.D, \"0\");\\n') .type('}') .go(); }); McpXは、三菱電機製PLCと通信するためのMCプロトコル（MCProtocol）対応ライブラリです。 シンプルなAPIで扱いやすく、MCプロトコルを意識することなく利用でき、Linux、Windows、macOS など、さまざまなプラットフォームで動作します。 NuGetでインストール 数行のコードでPLCのデバイスにアクセス可能です！ インストール方法 対応プロトコル・コマンド PLCパラメータ設定 APIドキュメント GitHub NuGet"
  }
}